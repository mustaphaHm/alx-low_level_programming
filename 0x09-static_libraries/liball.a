!<arch>
0-isupper.c/    0           0     0     644     201       `
#include "main.h"
/**
 * _isupper - function that return 1 or 0
 * @c: c is an integer parameter
 * Return: 1 or 0
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     301       `
#include "main.h"
/**
 *_memset - function that fills memory with a constant byte
 *@s: pointer
 *@b: character to replace
 *@n: number of times to replace
 *Return: char
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     413       `
#include "main.h"
/**
 * *_strcat - concatenates two strings
 *
 * @dest: first string
 * @src: Second string
 * Return: String
 */
char *_strcat(char *dest, char *src)
{
	int lenghtDest = 0;
	int lenghtSrc = 0;

	while (dest[lenghtDest] != '\0')
		lenghtDest++;
	while (src[lenghtSrc] != '\0')
	{
		dest[lenghtDest] = src[lenghtSrc];
		lenghtDest++;
		lenghtSrc++;
	}
	dest[lenghtDest] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     135       `
#include "main.h"
/**
 *_atoi - function
 *@s: string parameter
 *Return: Integer
 */
int _atoi(char *s)
{
	int i = *s;
	return (i);
}

1-isdigit.c/    0           0     0     644     201       `
#include "main.h"
/**
 * _isdigit - function that return 1 or 0
 * @c: c is an integer parameter
 * Return: 1 or 0
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     283       `
#include "main.h"
/**
 *_memcpy - function that copies memory area
 *@dest: destination
 *@src: source
 *@n: unsigned int
 *Return: char
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     475       `
#include "main.h"
/**
 **_strncat - concatenates two strings
 *
 * @dest: first string
 * @src: Second string
 * @n: integer
 * Return: String
 */
char *_strncat(char *dest, char *src, int n)
{
	int lenghtDest = 0;
	int lenghtSrc = 0;

	while (dest[lenghtDest] != '\0')
		lenghtDest++;
	while (src[lenghtSrc] != '\0' && lenghtSrc < n)
	{
		dest[lenghtDest] = src[lenghtSrc];
		lenghtDest++;
		lenghtSrc++;
	}
	if (lenghtDest > n)
		dest[lenghtDest] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     306       `
#include "main.h"
/**
 *_strchr - function that locates a character in a string
 *@s: a string variable
 *@c: character to locates in teh string
 *Return: char
 */
char *_strchr(char *s, char c)
{
	int cr;

	for (cr = 0; s[cr] >= '\0'; cr++)
		if (s[cr] == c)
		{
			return (s + cr);
		}
	return ('\0');
}
2-strlen.c/     0           0     0     644     242       `
#include "main.h"
/**
 * _strlen - return the lenght of a string
 *
 * @s: parametre de type char
 * Return: the leghnt of a string
 */
int _strlen(char *s)
{
	int lenght = 0;

	while (*s != '\0')
	{
		lenght++;
		s++;
	}
	return (lenght);
}
2-strncpy.c/    0           0     0     644     356       `
#include "main.h"
/**
 **_strncpy - Copy a string
 *
 * @dest: first string
 * @src: Second string
 * @n: integer
 * Return: String
 */
char *_strncpy(char *dest, char *src, int n)
{
	int count = 0;

	for (count = 0; count < n && src[count] != '\0'; count++)
		dest[count] = src[count];
	for ( ; count < n; count++)
		dest[count] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     202       `
#include "main.h"
/**
 * _islower - function that return 1 or 0
 * @c: c is an integer parameter
 * Return: 1 or 0
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     220       `
#include "main.h"
/**
 * _puts - print a string to stdout
 *
 * @str: parametre de type char
 * Return: Always 0
 */
void _puts(char *str)
{

	while (*str != '\0')
	{
		_putchar(*str + 0);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     296       `
#include "main.h"
/**
 *_strcmp - compare two strings
 *
 * @s1: first string
 * @s2: second string
 * Return: integer
 */
int _strcmp(char *s1, char *s2)
{
	int count;

	for (count = 0; s2[count] != '\0'; count++)
		if (s1[count] != s2[count])
			return (s1[count] - s2[count]);
	return (0);

}
3-strspn.c/     0           0     0     644     468       `
#include "main.h"
/**
 *_strspn - function that gets the length of a prefix substring
 *@s: a string variable
 *@accept: character
 *Return: unsigned
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int lenght = 0;
	unsigned int i, j;

	for (i = 0; s[i] >= '\0'; i++)
	{
		for (j = 0; accept[j] >= '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				lenght++;
				break;
			}
			else if (accept[j + 1] == '\0')
				return (lenght);
		}
	}
	return (lenght);
}
4-isalpha.c/    0           0     0     644     231       `
#include "main.h"
/**
 * _isalpha - function that check if a character is alpha
 *@c: an integer parametre
 *Return: 1 or 0
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	return (0);
}

4-strpbrk.c/    0           0     0     644     282       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
			if (*s == accept[k])
			return (s);
		}
	s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}

6-abs.c/        0           0     0     644     211       `
#include "main.h"
/**
 * _abs - function that return the absolute value of a number
 * @n: parametre of the function
 * Return: integer
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);
	else
		return (n);
}

9-strcpy.c/     0           0     0     644     342       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int x = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for ( ; x < l ; x++)
	{
		dest[x] = src[x];
	}
	dest[l] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

